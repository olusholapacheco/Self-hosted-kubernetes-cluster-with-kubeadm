name: Deploy Kubernetes Cluster using Kubeadm and AWS EC2s

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Remove existing Terraform files just in case of similar state error
      # - name: Remove existing Terraform files
      #   run: |
      #     rm -rf .terraform
      #     rm -f terraform.tfstate terraform.tfstate.backup

      - name: Verify S3 Bucket Existence
        run: aws s3api head-bucket --bucket my-terraform-state-bucket20124 || exit 1

      - name: Initialize Terraform
        run: |
          terraform init -backend-config="bucket=my-terraform-state-bucket20124" \
            -backend-config="key=my-my-terraform-state-bucket2024/terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="dynamodb_table=terraform-locks"

      - name: Apply Terraform
        run: terraform apply -auto-approve

      - name: Extract master IP
        run: |
          MASTER_IP=$(terraform output -json master_public_ip | jq -r '.value')
          echo "MASTER_IP=$MASTER_IP" >> $GITHUB_ENV

      - name: Extract worker IPs
        run: |
          WORKER_IPS=$(terraform output -json worker_public_ips | jq -r '.value[]')
          echo "WORKER_IPS=$WORKER_IPS" >> $GITHUB_ENV

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Set up master node
        env:
          MASTER_IP: ${{ env.MASTER_IP }}
        run: |
          scp -o StrictHostKeyChecking=no setup_k8s.sh "root@$MASTER_IP:/root/"
          ssh -o StrictHostKeyChecking=no "root@$MASTER_IP" 'chmod +x /root/setup_k8s.sh && /root/setup_k8s.sh'

      - name: Set up worker nodes
        env:
          WORKER_IPS: ${{ env.WORKER_IPS }}
        run: |
          for IP in $WORKER_IPS; do
            scp -o StrictHostKeyChecking=no setup_k8s.sh "root@$IP:/root/"
            ssh -o StrictHostKeyChecking=no "root@$IP" 'chmod +x /root/setup_k8s.sh && /root/setup_k8s.sh'
          done
    # - name: Terraform Destroy
    #   run: terraform destroy -auto-approve
